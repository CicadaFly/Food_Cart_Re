1.先建立Header(導覽列)，然後在其中插入圖片
2.建置Header上的cartbutton，span的階層由上到下分別為"button圖示(svg檔案)"，"名稱"，"購物車內容數量"
3.建立dummydata的meallist，並用map來導入其中，接著建構大意，最後用一個套件包起來，傳回app.js
4.先建立Meal的Card，美觀顯示；接著建立MealsItem，透過不同的props讓步驟3的list map，以達到條列效果
5.建立MealsForm，內容有一個form欄位(且具有input功能)跟一個+add按鈕，input利用UI來建立，可以直接繼承input的屬性內容
6.初步建置購物車畫面，安排div跟cartItem常數
7.建置購物車頁面，先在index底下建立overlay區塊，再用createPortal的方式將購物車頁面輸出到overlay，便能做出浮動在root page上方的效果。
接著將購物車頁面包入Cart，形成真正的購物車元素。
8.在APP.js內，建立useState來控制Cart的出現與否，包含header的開啟跟overlay的關閉。
9.利用context跟provider，取代原先在app內的fragament，來賦予整個頁面存放/讀取購物車內容的功能。
10.調整Header內的數字顯示，連動provider提供的數字。
11.進一步在provider內設定reducer，使用item作為add的key，id作為delete的key。***
12.為了讓mealsForm內的數值，透過onSubmit傳入cartcontext(讓header能透過cartcontext讀取到數值)，要建立useRef來儲存current.value
13.由於useRef的ref值會在input內，違反useRef必須在外層的規則，因此要進入input內導入forwardRef，才能讓useRef在input內讀取。
14.useRef存取的值，必須是數字，因此用current.value存取後需轉換成數值才能導入
15.有幾個注意點：
    (1).CartProvider裡面，reducer必須在外層(不能放在主function內)
    (2).{function}的用法，只有html內引用JS語法才需要，不然純JS能把代數看作公式套用
16.在MealsForm及MealsItem中，依序將按button的onSubmit傳遞上去，最後用context接收至addItem內
17.將cartContext引入Cart中，讓cart可以讀取存取的資料(改變後的購物車)，並將參數傳入cartitem內美化。
值得一提的是，bind的用法，當傳入的引數是公式+參數時，不能引數 = {公式(參數)}，要{公式.bind(null, 參數)}或是引數 = {()=>公式(參數)}
18.在cart中針對+-號分配handler指向cartContext的add/delete後，開始進行陣列元素的新增/移除動作，具體順序是：
    (1).尋找陣列中現有元素是否跟action的.item或.id元素相同，若有，則對那個元素進行標記(另存參數)
    (2).標記只是"標明"了該元素在陣列中的位置，會需要用陣列[位置]來個別存取那個元素
    (3).在新增時，元素若有重疊，則先繼承該元素的內容，再針對會有更動的數量(amount)進行更新，最後的陣列，需要把這個更新透過取代原陣列位置元素的方式丟回
    (4).在刪除時，若元素剩餘量為一，則須另存除了action.id以外的所有元素進新陣列，並進行匯出
19.針對headerButton內的元素，用useEffect搭配計時器的概念製作按鈕彈跳動畫
20.修改AvailableMeals內的資料來源，從原本的DummyData，改連結至FireBase內(用Fetch跟async進行呼叫，useEffect在頁面重新載入時進行首次存取)
21.以useState新增兩項功能，Loading畫面及Error畫面，Error畫面用到catch(Error)功能，需多研究
22.針對購物車內的按鈕，新增結帳功能以及欄位，同時建立按鈕間的出現規則
